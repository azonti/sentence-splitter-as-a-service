const Client = require('node-rest-client').Client
const client = new Client()

const args = {
    headers: {
      "Content-Type": "application/json"
    },
    data: [
      "今日、日帝本国に於いて、日帝を打倒せんと既に戦闘を開始しつつある武闘派の同志諸君と、戦闘の開始を決意しつつある潜在的同志諸君に対して、東アジア反日武装戦線“狼”は「兵士読本 Vol.1」を送る。これは、武闘派同志諸君と共に東アジア反日武装戦線へ合流し、その強化をめざす為のものである。さて、「兵士読本 Vol.1」は、東アジア反日武装戦線“狼”がこれまで自分たちの手で研究、開発、実験し、爆弾闘争を闘った経験を今の段階で総括するものであり、今後更に深化すべきものをその内容としている。即ち、日帝本国に於いて武装闘争＝都市ゲリラ戦を開始するにあたって最低限守らねばならないこと、最低限獲得し、習熟しなければならない諸技術、極く初歩の戦闘に於ける確認すべき原則などを今迄の“狼”の経験より提出し、同志諸君に点検、検討されるべきものである。",
      "完全な P2P 電子通貨の実現により、金融機関の介在無しに、利用者同士の直接的なオンライン決済が可能となるだろう。電子署名により、P2P 電子通貨の機能の一部は実現可能であるが、その機能の主な利点は、信用が置ける第三者機関が二重支払いを防ぐために必要とされる場合、失われることとなる。本論文では、P2P ネットワークの使用による、二重支払い問題の解決策を提案する。このネットワークでは各トランザクションを、ハッシュ関数に基づいた Proof-of-work の進行中のブロックチェーン上にハッシュ化することで、タイムスタンプを行う。これにより、Proof-of-work の計算を再度行わなければ変更不可能な記録を生成するのである。最長のブロックチェーンは、一連のトランザクション履歴を証明するだけでなく、それが最大の CPU パワーを保有するプールから生成されたものであることを証明する。善意のノードが過半数の CPU パワーをコントロールする限り、最長のチェーンを生成し続け、攻撃者を退けることが可能である。ネットワーク自体は必要最小限の構成で良い。メッセージはベストエフォート方式でブロードキャストすれば良く、各ノードはネットワークにいつ離脱・再接続しても問題ない。これは、各ノードが再接続時に最長のブロックチェーンを受け入れることで、離脱している間に何が生じたか把握することができるためである。"
    ]
}

client.post(`http://0.0.0.0:${process.env.PORT || 3000}`, args, data => console.log(data))
